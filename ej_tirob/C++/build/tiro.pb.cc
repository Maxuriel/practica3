// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tiro.proto

#include "tiro.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tiro {
PROTOBUF_CONSTEXPR CentroRequest::CentroRequest(
    ::_pbi::ConstantInitialized) {}
struct CentroRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CentroRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CentroRequestDefaultTypeInternal() {}
  union {
    CentroRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CentroRequestDefaultTypeInternal _CentroRequest_default_instance_;
PROTOBUF_CONSTEXPR CentroResponse::CentroResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.distancia_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CentroResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CentroResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CentroResponseDefaultTypeInternal() {}
  union {
    CentroResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CentroResponseDefaultTypeInternal _CentroResponse_default_instance_;
PROTOBUF_CONSTEXPR DisparoRequest::DisparoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.usuario_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.angulo_)*/0
  , /*decltype(_impl_.velocidad_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DisparoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisparoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisparoRequestDefaultTypeInternal() {}
  union {
    DisparoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisparoRequestDefaultTypeInternal _DisparoRequest_default_instance_;
PROTOBUF_CONSTEXPR DisparoResponse::DisparoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.distancia_al_centro_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DisparoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisparoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisparoResponseDefaultTypeInternal() {}
  union {
    DisparoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisparoResponseDefaultTypeInternal _DisparoResponse_default_instance_;
PROTOBUF_CONSTEXPR MejorDisparoRequest::MejorDisparoRequest(
    ::_pbi::ConstantInitialized) {}
struct MejorDisparoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MejorDisparoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MejorDisparoRequestDefaultTypeInternal() {}
  union {
    MejorDisparoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MejorDisparoRequestDefaultTypeInternal _MejorDisparoRequest_default_instance_;
PROTOBUF_CONSTEXPR MejorDisparoResponse::MejorDisparoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.usuario_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distancia_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MejorDisparoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MejorDisparoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MejorDisparoResponseDefaultTypeInternal() {}
  union {
    MejorDisparoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MejorDisparoResponseDefaultTypeInternal _MejorDisparoResponse_default_instance_;
}  // namespace tiro
static ::_pb::Metadata file_level_metadata_tiro_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tiro_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tiro_2eproto = nullptr;

const uint32_t TableStruct_tiro_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiro::CentroRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiro::CentroResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tiro::CentroResponse, _impl_.distancia_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiro::DisparoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tiro::DisparoRequest, _impl_.usuario_),
  PROTOBUF_FIELD_OFFSET(::tiro::DisparoRequest, _impl_.angulo_),
  PROTOBUF_FIELD_OFFSET(::tiro::DisparoRequest, _impl_.velocidad_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiro::DisparoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tiro::DisparoResponse, _impl_.distancia_al_centro_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiro::MejorDisparoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tiro::MejorDisparoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tiro::MejorDisparoResponse, _impl_.usuario_),
  PROTOBUF_FIELD_OFFSET(::tiro::MejorDisparoResponse, _impl_.distancia_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tiro::CentroRequest)},
  { 6, -1, -1, sizeof(::tiro::CentroResponse)},
  { 13, -1, -1, sizeof(::tiro::DisparoRequest)},
  { 22, -1, -1, sizeof(::tiro::DisparoResponse)},
  { 29, -1, -1, sizeof(::tiro::MejorDisparoRequest)},
  { 35, -1, -1, sizeof(::tiro::MejorDisparoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tiro::_CentroRequest_default_instance_._instance,
  &::tiro::_CentroResponse_default_instance_._instance,
  &::tiro::_DisparoRequest_default_instance_._instance,
  &::tiro::_DisparoResponse_default_instance_._instance,
  &::tiro::_MejorDisparoRequest_default_instance_._instance,
  &::tiro::_MejorDisparoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_tiro_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntiro.proto\022\004tiro\"\017\n\rCentroRequest\"#\n\016C"
  "entroResponse\022\021\n\tdistancia\030\001 \001(\002\"D\n\016Disp"
  "aroRequest\022\017\n\007usuario\030\001 \001(\t\022\016\n\006angulo\030\002 "
  "\001(\002\022\021\n\tvelocidad\030\003 \001(\002\".\n\017DisparoRespons"
  "e\022\033\n\023distancia_al_centro\030\001 \001(\002\"\025\n\023MejorD"
  "isparoRequest\":\n\024MejorDisparoResponse\022\017\n"
  "\007usuario\030\001 \001(\t\022\021\n\tdistancia\030\002 \001(\0022\321\001\n\014Ti"
  "roAlBlanco\022<\n\017DimeCentroDiana\022\023.tiro.Cen"
  "troRequest\032\024.tiro.CentroResponse\022<\n\rDisp"
  "araCannon\022\024.tiro.DisparoRequest\032\025.tiro.D"
  "isparoResponse\022E\n\014MejorDisparo\022\031.tiro.Me"
  "jorDisparoRequest\032\032.tiro.MejorDisparoRes"
  "ponseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tiro_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tiro_2eproto = {
    false, false, 493, descriptor_table_protodef_tiro_2eproto,
    "tiro.proto",
    &descriptor_table_tiro_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_tiro_2eproto::offsets,
    file_level_metadata_tiro_2eproto, file_level_enum_descriptors_tiro_2eproto,
    file_level_service_descriptors_tiro_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tiro_2eproto_getter() {
  return &descriptor_table_tiro_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tiro_2eproto(&descriptor_table_tiro_2eproto);
namespace tiro {

// ===================================================================

class CentroRequest::_Internal {
 public:
};

CentroRequest::CentroRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tiro.CentroRequest)
}
CentroRequest::CentroRequest(const CentroRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CentroRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tiro.CentroRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CentroRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CentroRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CentroRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tiro_2eproto_getter, &descriptor_table_tiro_2eproto_once,
      file_level_metadata_tiro_2eproto[0]);
}

// ===================================================================

class CentroResponse::_Internal {
 public:
};

CentroResponse::CentroResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tiro.CentroResponse)
}
CentroResponse::CentroResponse(const CentroResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CentroResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.distancia_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.distancia_ = from._impl_.distancia_;
  // @@protoc_insertion_point(copy_constructor:tiro.CentroResponse)
}

inline void CentroResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.distancia_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CentroResponse::~CentroResponse() {
  // @@protoc_insertion_point(destructor:tiro.CentroResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CentroResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CentroResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CentroResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tiro.CentroResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.distancia_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CentroResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float distancia = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.distancia_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CentroResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tiro.CentroResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float distancia = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distancia = this->_internal_distancia();
  uint32_t raw_distancia;
  memcpy(&raw_distancia, &tmp_distancia, sizeof(tmp_distancia));
  if (raw_distancia != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_distancia(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiro.CentroResponse)
  return target;
}

size_t CentroResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiro.CentroResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distancia = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distancia = this->_internal_distancia();
  uint32_t raw_distancia;
  memcpy(&raw_distancia, &tmp_distancia, sizeof(tmp_distancia));
  if (raw_distancia != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CentroResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CentroResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CentroResponse::GetClassData() const { return &_class_data_; }


void CentroResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CentroResponse*>(&to_msg);
  auto& from = static_cast<const CentroResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tiro.CentroResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distancia = from._internal_distancia();
  uint32_t raw_distancia;
  memcpy(&raw_distancia, &tmp_distancia, sizeof(tmp_distancia));
  if (raw_distancia != 0) {
    _this->_internal_set_distancia(from._internal_distancia());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CentroResponse::CopyFrom(const CentroResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiro.CentroResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CentroResponse::IsInitialized() const {
  return true;
}

void CentroResponse::InternalSwap(CentroResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.distancia_, other->_impl_.distancia_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CentroResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tiro_2eproto_getter, &descriptor_table_tiro_2eproto_once,
      file_level_metadata_tiro_2eproto[1]);
}

// ===================================================================

class DisparoRequest::_Internal {
 public:
};

DisparoRequest::DisparoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tiro.DisparoRequest)
}
DisparoRequest::DisparoRequest(const DisparoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisparoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.usuario_){}
    , decltype(_impl_.angulo_){}
    , decltype(_impl_.velocidad_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.usuario_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usuario_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usuario().empty()) {
    _this->_impl_.usuario_.Set(from._internal_usuario(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.angulo_, &from._impl_.angulo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.velocidad_) -
    reinterpret_cast<char*>(&_impl_.angulo_)) + sizeof(_impl_.velocidad_));
  // @@protoc_insertion_point(copy_constructor:tiro.DisparoRequest)
}

inline void DisparoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.usuario_){}
    , decltype(_impl_.angulo_){0}
    , decltype(_impl_.velocidad_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.usuario_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usuario_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DisparoRequest::~DisparoRequest() {
  // @@protoc_insertion_point(destructor:tiro.DisparoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisparoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.usuario_.Destroy();
}

void DisparoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisparoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tiro.DisparoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.usuario_.ClearToEmpty();
  ::memset(&_impl_.angulo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.velocidad_) -
      reinterpret_cast<char*>(&_impl_.angulo_)) + sizeof(_impl_.velocidad_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisparoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string usuario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_usuario();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tiro.DisparoRequest.usuario"));
        } else
          goto handle_unusual;
        continue;
      // float angulo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.angulo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocidad = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.velocidad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisparoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tiro.DisparoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string usuario = 1;
  if (!this->_internal_usuario().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usuario().data(), static_cast<int>(this->_internal_usuario().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiro.DisparoRequest.usuario");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_usuario(), target);
  }

  // float angulo = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angulo = this->_internal_angulo();
  uint32_t raw_angulo;
  memcpy(&raw_angulo, &tmp_angulo, sizeof(tmp_angulo));
  if (raw_angulo != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_angulo(), target);
  }

  // float velocidad = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocidad = this->_internal_velocidad();
  uint32_t raw_velocidad;
  memcpy(&raw_velocidad, &tmp_velocidad, sizeof(tmp_velocidad));
  if (raw_velocidad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_velocidad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiro.DisparoRequest)
  return target;
}

size_t DisparoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiro.DisparoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string usuario = 1;
  if (!this->_internal_usuario().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usuario());
  }

  // float angulo = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angulo = this->_internal_angulo();
  uint32_t raw_angulo;
  memcpy(&raw_angulo, &tmp_angulo, sizeof(tmp_angulo));
  if (raw_angulo != 0) {
    total_size += 1 + 4;
  }

  // float velocidad = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocidad = this->_internal_velocidad();
  uint32_t raw_velocidad;
  memcpy(&raw_velocidad, &tmp_velocidad, sizeof(tmp_velocidad));
  if (raw_velocidad != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisparoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisparoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisparoRequest::GetClassData() const { return &_class_data_; }


void DisparoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisparoRequest*>(&to_msg);
  auto& from = static_cast<const DisparoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tiro.DisparoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_usuario().empty()) {
    _this->_internal_set_usuario(from._internal_usuario());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angulo = from._internal_angulo();
  uint32_t raw_angulo;
  memcpy(&raw_angulo, &tmp_angulo, sizeof(tmp_angulo));
  if (raw_angulo != 0) {
    _this->_internal_set_angulo(from._internal_angulo());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocidad = from._internal_velocidad();
  uint32_t raw_velocidad;
  memcpy(&raw_velocidad, &tmp_velocidad, sizeof(tmp_velocidad));
  if (raw_velocidad != 0) {
    _this->_internal_set_velocidad(from._internal_velocidad());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisparoRequest::CopyFrom(const DisparoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiro.DisparoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisparoRequest::IsInitialized() const {
  return true;
}

void DisparoRequest::InternalSwap(DisparoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.usuario_, lhs_arena,
      &other->_impl_.usuario_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisparoRequest, _impl_.velocidad_)
      + sizeof(DisparoRequest::_impl_.velocidad_)
      - PROTOBUF_FIELD_OFFSET(DisparoRequest, _impl_.angulo_)>(
          reinterpret_cast<char*>(&_impl_.angulo_),
          reinterpret_cast<char*>(&other->_impl_.angulo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisparoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tiro_2eproto_getter, &descriptor_table_tiro_2eproto_once,
      file_level_metadata_tiro_2eproto[2]);
}

// ===================================================================

class DisparoResponse::_Internal {
 public:
};

DisparoResponse::DisparoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tiro.DisparoResponse)
}
DisparoResponse::DisparoResponse(const DisparoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisparoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.distancia_al_centro_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.distancia_al_centro_ = from._impl_.distancia_al_centro_;
  // @@protoc_insertion_point(copy_constructor:tiro.DisparoResponse)
}

inline void DisparoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.distancia_al_centro_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DisparoResponse::~DisparoResponse() {
  // @@protoc_insertion_point(destructor:tiro.DisparoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisparoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisparoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisparoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tiro.DisparoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.distancia_al_centro_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisparoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float distancia_al_centro = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.distancia_al_centro_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisparoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tiro.DisparoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float distancia_al_centro = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distancia_al_centro = this->_internal_distancia_al_centro();
  uint32_t raw_distancia_al_centro;
  memcpy(&raw_distancia_al_centro, &tmp_distancia_al_centro, sizeof(tmp_distancia_al_centro));
  if (raw_distancia_al_centro != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_distancia_al_centro(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiro.DisparoResponse)
  return target;
}

size_t DisparoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiro.DisparoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distancia_al_centro = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distancia_al_centro = this->_internal_distancia_al_centro();
  uint32_t raw_distancia_al_centro;
  memcpy(&raw_distancia_al_centro, &tmp_distancia_al_centro, sizeof(tmp_distancia_al_centro));
  if (raw_distancia_al_centro != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisparoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisparoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisparoResponse::GetClassData() const { return &_class_data_; }


void DisparoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisparoResponse*>(&to_msg);
  auto& from = static_cast<const DisparoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tiro.DisparoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distancia_al_centro = from._internal_distancia_al_centro();
  uint32_t raw_distancia_al_centro;
  memcpy(&raw_distancia_al_centro, &tmp_distancia_al_centro, sizeof(tmp_distancia_al_centro));
  if (raw_distancia_al_centro != 0) {
    _this->_internal_set_distancia_al_centro(from._internal_distancia_al_centro());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisparoResponse::CopyFrom(const DisparoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiro.DisparoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisparoResponse::IsInitialized() const {
  return true;
}

void DisparoResponse::InternalSwap(DisparoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.distancia_al_centro_, other->_impl_.distancia_al_centro_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisparoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tiro_2eproto_getter, &descriptor_table_tiro_2eproto_once,
      file_level_metadata_tiro_2eproto[3]);
}

// ===================================================================

class MejorDisparoRequest::_Internal {
 public:
};

MejorDisparoRequest::MejorDisparoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tiro.MejorDisparoRequest)
}
MejorDisparoRequest::MejorDisparoRequest(const MejorDisparoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MejorDisparoRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tiro.MejorDisparoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MejorDisparoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MejorDisparoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MejorDisparoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tiro_2eproto_getter, &descriptor_table_tiro_2eproto_once,
      file_level_metadata_tiro_2eproto[4]);
}

// ===================================================================

class MejorDisparoResponse::_Internal {
 public:
};

MejorDisparoResponse::MejorDisparoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tiro.MejorDisparoResponse)
}
MejorDisparoResponse::MejorDisparoResponse(const MejorDisparoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MejorDisparoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.usuario_){}
    , decltype(_impl_.distancia_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.usuario_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usuario_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usuario().empty()) {
    _this->_impl_.usuario_.Set(from._internal_usuario(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.distancia_ = from._impl_.distancia_;
  // @@protoc_insertion_point(copy_constructor:tiro.MejorDisparoResponse)
}

inline void MejorDisparoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.usuario_){}
    , decltype(_impl_.distancia_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.usuario_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usuario_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MejorDisparoResponse::~MejorDisparoResponse() {
  // @@protoc_insertion_point(destructor:tiro.MejorDisparoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MejorDisparoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.usuario_.Destroy();
}

void MejorDisparoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MejorDisparoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tiro.MejorDisparoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.usuario_.ClearToEmpty();
  _impl_.distancia_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MejorDisparoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string usuario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_usuario();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tiro.MejorDisparoResponse.usuario"));
        } else
          goto handle_unusual;
        continue;
      // float distancia = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.distancia_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MejorDisparoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tiro.MejorDisparoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string usuario = 1;
  if (!this->_internal_usuario().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usuario().data(), static_cast<int>(this->_internal_usuario().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tiro.MejorDisparoResponse.usuario");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_usuario(), target);
  }

  // float distancia = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distancia = this->_internal_distancia();
  uint32_t raw_distancia;
  memcpy(&raw_distancia, &tmp_distancia, sizeof(tmp_distancia));
  if (raw_distancia != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_distancia(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiro.MejorDisparoResponse)
  return target;
}

size_t MejorDisparoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiro.MejorDisparoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string usuario = 1;
  if (!this->_internal_usuario().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usuario());
  }

  // float distancia = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distancia = this->_internal_distancia();
  uint32_t raw_distancia;
  memcpy(&raw_distancia, &tmp_distancia, sizeof(tmp_distancia));
  if (raw_distancia != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MejorDisparoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MejorDisparoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MejorDisparoResponse::GetClassData() const { return &_class_data_; }


void MejorDisparoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MejorDisparoResponse*>(&to_msg);
  auto& from = static_cast<const MejorDisparoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tiro.MejorDisparoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_usuario().empty()) {
    _this->_internal_set_usuario(from._internal_usuario());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distancia = from._internal_distancia();
  uint32_t raw_distancia;
  memcpy(&raw_distancia, &tmp_distancia, sizeof(tmp_distancia));
  if (raw_distancia != 0) {
    _this->_internal_set_distancia(from._internal_distancia());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MejorDisparoResponse::CopyFrom(const MejorDisparoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiro.MejorDisparoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MejorDisparoResponse::IsInitialized() const {
  return true;
}

void MejorDisparoResponse::InternalSwap(MejorDisparoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.usuario_, lhs_arena,
      &other->_impl_.usuario_, rhs_arena
  );
  swap(_impl_.distancia_, other->_impl_.distancia_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MejorDisparoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tiro_2eproto_getter, &descriptor_table_tiro_2eproto_once,
      file_level_metadata_tiro_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tiro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tiro::CentroRequest*
Arena::CreateMaybeMessage< ::tiro::CentroRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiro::CentroRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tiro::CentroResponse*
Arena::CreateMaybeMessage< ::tiro::CentroResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiro::CentroResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tiro::DisparoRequest*
Arena::CreateMaybeMessage< ::tiro::DisparoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiro::DisparoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tiro::DisparoResponse*
Arena::CreateMaybeMessage< ::tiro::DisparoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiro::DisparoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tiro::MejorDisparoRequest*
Arena::CreateMaybeMessage< ::tiro::MejorDisparoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiro::MejorDisparoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tiro::MejorDisparoResponse*
Arena::CreateMaybeMessage< ::tiro::MejorDisparoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tiro::MejorDisparoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
