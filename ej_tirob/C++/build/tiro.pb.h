// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tiro.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tiro_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tiro_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tiro_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tiro_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tiro_2eproto;
namespace tiro {
class CentroRequest;
struct CentroRequestDefaultTypeInternal;
extern CentroRequestDefaultTypeInternal _CentroRequest_default_instance_;
class CentroResponse;
struct CentroResponseDefaultTypeInternal;
extern CentroResponseDefaultTypeInternal _CentroResponse_default_instance_;
class DisparoRequest;
struct DisparoRequestDefaultTypeInternal;
extern DisparoRequestDefaultTypeInternal _DisparoRequest_default_instance_;
class DisparoResponse;
struct DisparoResponseDefaultTypeInternal;
extern DisparoResponseDefaultTypeInternal _DisparoResponse_default_instance_;
class MejorDisparoRequest;
struct MejorDisparoRequestDefaultTypeInternal;
extern MejorDisparoRequestDefaultTypeInternal _MejorDisparoRequest_default_instance_;
class MejorDisparoResponse;
struct MejorDisparoResponseDefaultTypeInternal;
extern MejorDisparoResponseDefaultTypeInternal _MejorDisparoResponse_default_instance_;
}  // namespace tiro
PROTOBUF_NAMESPACE_OPEN
template<> ::tiro::CentroRequest* Arena::CreateMaybeMessage<::tiro::CentroRequest>(Arena*);
template<> ::tiro::CentroResponse* Arena::CreateMaybeMessage<::tiro::CentroResponse>(Arena*);
template<> ::tiro::DisparoRequest* Arena::CreateMaybeMessage<::tiro::DisparoRequest>(Arena*);
template<> ::tiro::DisparoResponse* Arena::CreateMaybeMessage<::tiro::DisparoResponse>(Arena*);
template<> ::tiro::MejorDisparoRequest* Arena::CreateMaybeMessage<::tiro::MejorDisparoRequest>(Arena*);
template<> ::tiro::MejorDisparoResponse* Arena::CreateMaybeMessage<::tiro::MejorDisparoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tiro {

// ===================================================================

class CentroRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tiro.CentroRequest) */ {
 public:
  inline CentroRequest() : CentroRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CentroRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CentroRequest(const CentroRequest& from);
  CentroRequest(CentroRequest&& from) noexcept
    : CentroRequest() {
    *this = ::std::move(from);
  }

  inline CentroRequest& operator=(const CentroRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CentroRequest& operator=(CentroRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CentroRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CentroRequest* internal_default_instance() {
    return reinterpret_cast<const CentroRequest*>(
               &_CentroRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CentroRequest& a, CentroRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CentroRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CentroRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CentroRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CentroRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CentroRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CentroRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiro.CentroRequest";
  }
  protected:
  explicit CentroRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tiro.CentroRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_tiro_2eproto;
};
// -------------------------------------------------------------------

class CentroResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiro.CentroResponse) */ {
 public:
  inline CentroResponse() : CentroResponse(nullptr) {}
  ~CentroResponse() override;
  explicit PROTOBUF_CONSTEXPR CentroResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CentroResponse(const CentroResponse& from);
  CentroResponse(CentroResponse&& from) noexcept
    : CentroResponse() {
    *this = ::std::move(from);
  }

  inline CentroResponse& operator=(const CentroResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CentroResponse& operator=(CentroResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CentroResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CentroResponse* internal_default_instance() {
    return reinterpret_cast<const CentroResponse*>(
               &_CentroResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CentroResponse& a, CentroResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CentroResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CentroResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CentroResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CentroResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CentroResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CentroResponse& from) {
    CentroResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CentroResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiro.CentroResponse";
  }
  protected:
  explicit CentroResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanciaFieldNumber = 1,
  };
  // float distancia = 1;
  void clear_distancia();
  float distancia() const;
  void set_distancia(float value);
  private:
  float _internal_distancia() const;
  void _internal_set_distancia(float value);
  public:

  // @@protoc_insertion_point(class_scope:tiro.CentroResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float distancia_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiro_2eproto;
};
// -------------------------------------------------------------------

class DisparoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiro.DisparoRequest) */ {
 public:
  inline DisparoRequest() : DisparoRequest(nullptr) {}
  ~DisparoRequest() override;
  explicit PROTOBUF_CONSTEXPR DisparoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisparoRequest(const DisparoRequest& from);
  DisparoRequest(DisparoRequest&& from) noexcept
    : DisparoRequest() {
    *this = ::std::move(from);
  }

  inline DisparoRequest& operator=(const DisparoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisparoRequest& operator=(DisparoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisparoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisparoRequest* internal_default_instance() {
    return reinterpret_cast<const DisparoRequest*>(
               &_DisparoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DisparoRequest& a, DisparoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisparoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisparoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisparoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisparoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisparoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisparoRequest& from) {
    DisparoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisparoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiro.DisparoRequest";
  }
  protected:
  explicit DisparoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsuarioFieldNumber = 1,
    kAnguloFieldNumber = 2,
    kVelocidadFieldNumber = 3,
  };
  // string usuario = 1;
  void clear_usuario();
  const std::string& usuario() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usuario(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usuario();
  PROTOBUF_NODISCARD std::string* release_usuario();
  void set_allocated_usuario(std::string* usuario);
  private:
  const std::string& _internal_usuario() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usuario(const std::string& value);
  std::string* _internal_mutable_usuario();
  public:

  // float angulo = 2;
  void clear_angulo();
  float angulo() const;
  void set_angulo(float value);
  private:
  float _internal_angulo() const;
  void _internal_set_angulo(float value);
  public:

  // float velocidad = 3;
  void clear_velocidad();
  float velocidad() const;
  void set_velocidad(float value);
  private:
  float _internal_velocidad() const;
  void _internal_set_velocidad(float value);
  public:

  // @@protoc_insertion_point(class_scope:tiro.DisparoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usuario_;
    float angulo_;
    float velocidad_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiro_2eproto;
};
// -------------------------------------------------------------------

class DisparoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiro.DisparoResponse) */ {
 public:
  inline DisparoResponse() : DisparoResponse(nullptr) {}
  ~DisparoResponse() override;
  explicit PROTOBUF_CONSTEXPR DisparoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisparoResponse(const DisparoResponse& from);
  DisparoResponse(DisparoResponse&& from) noexcept
    : DisparoResponse() {
    *this = ::std::move(from);
  }

  inline DisparoResponse& operator=(const DisparoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisparoResponse& operator=(DisparoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisparoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisparoResponse* internal_default_instance() {
    return reinterpret_cast<const DisparoResponse*>(
               &_DisparoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DisparoResponse& a, DisparoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisparoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisparoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisparoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisparoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisparoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisparoResponse& from) {
    DisparoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisparoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiro.DisparoResponse";
  }
  protected:
  explicit DisparoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanciaAlCentroFieldNumber = 1,
  };
  // float distancia_al_centro = 1;
  void clear_distancia_al_centro();
  float distancia_al_centro() const;
  void set_distancia_al_centro(float value);
  private:
  float _internal_distancia_al_centro() const;
  void _internal_set_distancia_al_centro(float value);
  public:

  // @@protoc_insertion_point(class_scope:tiro.DisparoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float distancia_al_centro_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiro_2eproto;
};
// -------------------------------------------------------------------

class MejorDisparoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tiro.MejorDisparoRequest) */ {
 public:
  inline MejorDisparoRequest() : MejorDisparoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MejorDisparoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MejorDisparoRequest(const MejorDisparoRequest& from);
  MejorDisparoRequest(MejorDisparoRequest&& from) noexcept
    : MejorDisparoRequest() {
    *this = ::std::move(from);
  }

  inline MejorDisparoRequest& operator=(const MejorDisparoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MejorDisparoRequest& operator=(MejorDisparoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MejorDisparoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MejorDisparoRequest* internal_default_instance() {
    return reinterpret_cast<const MejorDisparoRequest*>(
               &_MejorDisparoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MejorDisparoRequest& a, MejorDisparoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MejorDisparoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MejorDisparoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MejorDisparoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MejorDisparoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MejorDisparoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MejorDisparoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiro.MejorDisparoRequest";
  }
  protected:
  explicit MejorDisparoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tiro.MejorDisparoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_tiro_2eproto;
};
// -------------------------------------------------------------------

class MejorDisparoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiro.MejorDisparoResponse) */ {
 public:
  inline MejorDisparoResponse() : MejorDisparoResponse(nullptr) {}
  ~MejorDisparoResponse() override;
  explicit PROTOBUF_CONSTEXPR MejorDisparoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MejorDisparoResponse(const MejorDisparoResponse& from);
  MejorDisparoResponse(MejorDisparoResponse&& from) noexcept
    : MejorDisparoResponse() {
    *this = ::std::move(from);
  }

  inline MejorDisparoResponse& operator=(const MejorDisparoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MejorDisparoResponse& operator=(MejorDisparoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MejorDisparoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MejorDisparoResponse* internal_default_instance() {
    return reinterpret_cast<const MejorDisparoResponse*>(
               &_MejorDisparoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MejorDisparoResponse& a, MejorDisparoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MejorDisparoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MejorDisparoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MejorDisparoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MejorDisparoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MejorDisparoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MejorDisparoResponse& from) {
    MejorDisparoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MejorDisparoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiro.MejorDisparoResponse";
  }
  protected:
  explicit MejorDisparoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsuarioFieldNumber = 1,
    kDistanciaFieldNumber = 2,
  };
  // string usuario = 1;
  void clear_usuario();
  const std::string& usuario() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usuario(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usuario();
  PROTOBUF_NODISCARD std::string* release_usuario();
  void set_allocated_usuario(std::string* usuario);
  private:
  const std::string& _internal_usuario() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usuario(const std::string& value);
  std::string* _internal_mutable_usuario();
  public:

  // float distancia = 2;
  void clear_distancia();
  float distancia() const;
  void set_distancia(float value);
  private:
  float _internal_distancia() const;
  void _internal_set_distancia(float value);
  public:

  // @@protoc_insertion_point(class_scope:tiro.MejorDisparoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usuario_;
    float distancia_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiro_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CentroRequest

// -------------------------------------------------------------------

// CentroResponse

// float distancia = 1;
inline void CentroResponse::clear_distancia() {
  _impl_.distancia_ = 0;
}
inline float CentroResponse::_internal_distancia() const {
  return _impl_.distancia_;
}
inline float CentroResponse::distancia() const {
  // @@protoc_insertion_point(field_get:tiro.CentroResponse.distancia)
  return _internal_distancia();
}
inline void CentroResponse::_internal_set_distancia(float value) {
  
  _impl_.distancia_ = value;
}
inline void CentroResponse::set_distancia(float value) {
  _internal_set_distancia(value);
  // @@protoc_insertion_point(field_set:tiro.CentroResponse.distancia)
}

// -------------------------------------------------------------------

// DisparoRequest

// string usuario = 1;
inline void DisparoRequest::clear_usuario() {
  _impl_.usuario_.ClearToEmpty();
}
inline const std::string& DisparoRequest::usuario() const {
  // @@protoc_insertion_point(field_get:tiro.DisparoRequest.usuario)
  return _internal_usuario();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisparoRequest::set_usuario(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usuario_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tiro.DisparoRequest.usuario)
}
inline std::string* DisparoRequest::mutable_usuario() {
  std::string* _s = _internal_mutable_usuario();
  // @@protoc_insertion_point(field_mutable:tiro.DisparoRequest.usuario)
  return _s;
}
inline const std::string& DisparoRequest::_internal_usuario() const {
  return _impl_.usuario_.Get();
}
inline void DisparoRequest::_internal_set_usuario(const std::string& value) {
  
  _impl_.usuario_.Set(value, GetArenaForAllocation());
}
inline std::string* DisparoRequest::_internal_mutable_usuario() {
  
  return _impl_.usuario_.Mutable(GetArenaForAllocation());
}
inline std::string* DisparoRequest::release_usuario() {
  // @@protoc_insertion_point(field_release:tiro.DisparoRequest.usuario)
  return _impl_.usuario_.Release();
}
inline void DisparoRequest::set_allocated_usuario(std::string* usuario) {
  if (usuario != nullptr) {
    
  } else {
    
  }
  _impl_.usuario_.SetAllocated(usuario, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usuario_.IsDefault()) {
    _impl_.usuario_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tiro.DisparoRequest.usuario)
}

// float angulo = 2;
inline void DisparoRequest::clear_angulo() {
  _impl_.angulo_ = 0;
}
inline float DisparoRequest::_internal_angulo() const {
  return _impl_.angulo_;
}
inline float DisparoRequest::angulo() const {
  // @@protoc_insertion_point(field_get:tiro.DisparoRequest.angulo)
  return _internal_angulo();
}
inline void DisparoRequest::_internal_set_angulo(float value) {
  
  _impl_.angulo_ = value;
}
inline void DisparoRequest::set_angulo(float value) {
  _internal_set_angulo(value);
  // @@protoc_insertion_point(field_set:tiro.DisparoRequest.angulo)
}

// float velocidad = 3;
inline void DisparoRequest::clear_velocidad() {
  _impl_.velocidad_ = 0;
}
inline float DisparoRequest::_internal_velocidad() const {
  return _impl_.velocidad_;
}
inline float DisparoRequest::velocidad() const {
  // @@protoc_insertion_point(field_get:tiro.DisparoRequest.velocidad)
  return _internal_velocidad();
}
inline void DisparoRequest::_internal_set_velocidad(float value) {
  
  _impl_.velocidad_ = value;
}
inline void DisparoRequest::set_velocidad(float value) {
  _internal_set_velocidad(value);
  // @@protoc_insertion_point(field_set:tiro.DisparoRequest.velocidad)
}

// -------------------------------------------------------------------

// DisparoResponse

// float distancia_al_centro = 1;
inline void DisparoResponse::clear_distancia_al_centro() {
  _impl_.distancia_al_centro_ = 0;
}
inline float DisparoResponse::_internal_distancia_al_centro() const {
  return _impl_.distancia_al_centro_;
}
inline float DisparoResponse::distancia_al_centro() const {
  // @@protoc_insertion_point(field_get:tiro.DisparoResponse.distancia_al_centro)
  return _internal_distancia_al_centro();
}
inline void DisparoResponse::_internal_set_distancia_al_centro(float value) {
  
  _impl_.distancia_al_centro_ = value;
}
inline void DisparoResponse::set_distancia_al_centro(float value) {
  _internal_set_distancia_al_centro(value);
  // @@protoc_insertion_point(field_set:tiro.DisparoResponse.distancia_al_centro)
}

// -------------------------------------------------------------------

// MejorDisparoRequest

// -------------------------------------------------------------------

// MejorDisparoResponse

// string usuario = 1;
inline void MejorDisparoResponse::clear_usuario() {
  _impl_.usuario_.ClearToEmpty();
}
inline const std::string& MejorDisparoResponse::usuario() const {
  // @@protoc_insertion_point(field_get:tiro.MejorDisparoResponse.usuario)
  return _internal_usuario();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MejorDisparoResponse::set_usuario(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usuario_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tiro.MejorDisparoResponse.usuario)
}
inline std::string* MejorDisparoResponse::mutable_usuario() {
  std::string* _s = _internal_mutable_usuario();
  // @@protoc_insertion_point(field_mutable:tiro.MejorDisparoResponse.usuario)
  return _s;
}
inline const std::string& MejorDisparoResponse::_internal_usuario() const {
  return _impl_.usuario_.Get();
}
inline void MejorDisparoResponse::_internal_set_usuario(const std::string& value) {
  
  _impl_.usuario_.Set(value, GetArenaForAllocation());
}
inline std::string* MejorDisparoResponse::_internal_mutable_usuario() {
  
  return _impl_.usuario_.Mutable(GetArenaForAllocation());
}
inline std::string* MejorDisparoResponse::release_usuario() {
  // @@protoc_insertion_point(field_release:tiro.MejorDisparoResponse.usuario)
  return _impl_.usuario_.Release();
}
inline void MejorDisparoResponse::set_allocated_usuario(std::string* usuario) {
  if (usuario != nullptr) {
    
  } else {
    
  }
  _impl_.usuario_.SetAllocated(usuario, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usuario_.IsDefault()) {
    _impl_.usuario_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tiro.MejorDisparoResponse.usuario)
}

// float distancia = 2;
inline void MejorDisparoResponse::clear_distancia() {
  _impl_.distancia_ = 0;
}
inline float MejorDisparoResponse::_internal_distancia() const {
  return _impl_.distancia_;
}
inline float MejorDisparoResponse::distancia() const {
  // @@protoc_insertion_point(field_get:tiro.MejorDisparoResponse.distancia)
  return _internal_distancia();
}
inline void MejorDisparoResponse::_internal_set_distancia(float value) {
  
  _impl_.distancia_ = value;
}
inline void MejorDisparoResponse::set_distancia(float value) {
  _internal_set_distancia(value);
  // @@protoc_insertion_point(field_set:tiro.MejorDisparoResponse.distancia)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tiro

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tiro_2eproto
