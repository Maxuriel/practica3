// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tiro.proto
#ifndef GRPC_tiro_2eproto__INCLUDED
#define GRPC_tiro_2eproto__INCLUDED

#include "tiro.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace tiro {

class TiroAlBlanco final {
 public:
  static constexpr char const* service_full_name() {
    return "tiro.TiroAlBlanco";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Método para obtener la distancia al centro de la diana
    virtual ::grpc::Status DimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::tiro::CentroResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::CentroResponse>> AsyncDimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::CentroResponse>>(AsyncDimeCentroDianaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::CentroResponse>> PrepareAsyncDimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::CentroResponse>>(PrepareAsyncDimeCentroDianaRaw(context, request, cq));
    }
    // Método para disparar el cañón
    virtual ::grpc::Status DisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::tiro::DisparoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::DisparoResponse>> AsyncDisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::DisparoResponse>>(AsyncDisparaCannonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::DisparoResponse>> PrepareAsyncDisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::DisparoResponse>>(PrepareAsyncDisparaCannonRaw(context, request, cq));
    }
    // Método para obtener el mejor disparo
    virtual ::grpc::Status MejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::tiro::MejorDisparoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::MejorDisparoResponse>> AsyncMejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::MejorDisparoResponse>>(AsyncMejorDisparoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::MejorDisparoResponse>> PrepareAsyncMejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiro::MejorDisparoResponse>>(PrepareAsyncMejorDisparoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Método para obtener la distancia al centro de la diana
      virtual void DimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest* request, ::tiro::CentroResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest* request, ::tiro::CentroResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Método para disparar el cañón
      virtual void DisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest* request, ::tiro::DisparoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest* request, ::tiro::DisparoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Método para obtener el mejor disparo
      virtual void MejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest* request, ::tiro::MejorDisparoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest* request, ::tiro::MejorDisparoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiro::CentroResponse>* AsyncDimeCentroDianaRaw(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiro::CentroResponse>* PrepareAsyncDimeCentroDianaRaw(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiro::DisparoResponse>* AsyncDisparaCannonRaw(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiro::DisparoResponse>* PrepareAsyncDisparaCannonRaw(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiro::MejorDisparoResponse>* AsyncMejorDisparoRaw(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiro::MejorDisparoResponse>* PrepareAsyncMejorDisparoRaw(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::tiro::CentroResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::CentroResponse>> AsyncDimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::CentroResponse>>(AsyncDimeCentroDianaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::CentroResponse>> PrepareAsyncDimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::CentroResponse>>(PrepareAsyncDimeCentroDianaRaw(context, request, cq));
    }
    ::grpc::Status DisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::tiro::DisparoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::DisparoResponse>> AsyncDisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::DisparoResponse>>(AsyncDisparaCannonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::DisparoResponse>> PrepareAsyncDisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::DisparoResponse>>(PrepareAsyncDisparaCannonRaw(context, request, cq));
    }
    ::grpc::Status MejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::tiro::MejorDisparoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::MejorDisparoResponse>> AsyncMejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::MejorDisparoResponse>>(AsyncMejorDisparoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::MejorDisparoResponse>> PrepareAsyncMejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiro::MejorDisparoResponse>>(PrepareAsyncMejorDisparoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest* request, ::tiro::CentroResponse* response, std::function<void(::grpc::Status)>) override;
      void DimeCentroDiana(::grpc::ClientContext* context, const ::tiro::CentroRequest* request, ::tiro::CentroResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest* request, ::tiro::DisparoResponse* response, std::function<void(::grpc::Status)>) override;
      void DisparaCannon(::grpc::ClientContext* context, const ::tiro::DisparoRequest* request, ::tiro::DisparoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest* request, ::tiro::MejorDisparoResponse* response, std::function<void(::grpc::Status)>) override;
      void MejorDisparo(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest* request, ::tiro::MejorDisparoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tiro::CentroResponse>* AsyncDimeCentroDianaRaw(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiro::CentroResponse>* PrepareAsyncDimeCentroDianaRaw(::grpc::ClientContext* context, const ::tiro::CentroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiro::DisparoResponse>* AsyncDisparaCannonRaw(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiro::DisparoResponse>* PrepareAsyncDisparaCannonRaw(::grpc::ClientContext* context, const ::tiro::DisparoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiro::MejorDisparoResponse>* AsyncMejorDisparoRaw(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiro::MejorDisparoResponse>* PrepareAsyncMejorDisparoRaw(::grpc::ClientContext* context, const ::tiro::MejorDisparoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DimeCentroDiana_;
    const ::grpc::internal::RpcMethod rpcmethod_DisparaCannon_;
    const ::grpc::internal::RpcMethod rpcmethod_MejorDisparo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Método para obtener la distancia al centro de la diana
    virtual ::grpc::Status DimeCentroDiana(::grpc::ServerContext* context, const ::tiro::CentroRequest* request, ::tiro::CentroResponse* response);
    // Método para disparar el cañón
    virtual ::grpc::Status DisparaCannon(::grpc::ServerContext* context, const ::tiro::DisparoRequest* request, ::tiro::DisparoResponse* response);
    // Método para obtener el mejor disparo
    virtual ::grpc::Status MejorDisparo(::grpc::ServerContext* context, const ::tiro::MejorDisparoRequest* request, ::tiro::MejorDisparoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DimeCentroDiana : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DimeCentroDiana() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DimeCentroDiana() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DimeCentroDiana(::grpc::ServerContext* /*context*/, const ::tiro::CentroRequest* /*request*/, ::tiro::CentroResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDimeCentroDiana(::grpc::ServerContext* context, ::tiro::CentroRequest* request, ::grpc::ServerAsyncResponseWriter< ::tiro::CentroResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DisparaCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DisparaCannon() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DisparaCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisparaCannon(::grpc::ServerContext* /*context*/, const ::tiro::DisparoRequest* /*request*/, ::tiro::DisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisparaCannon(::grpc::ServerContext* context, ::tiro::DisparoRequest* request, ::grpc::ServerAsyncResponseWriter< ::tiro::DisparoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MejorDisparo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MejorDisparo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MejorDisparo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MejorDisparo(::grpc::ServerContext* /*context*/, const ::tiro::MejorDisparoRequest* /*request*/, ::tiro::MejorDisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMejorDisparo(::grpc::ServerContext* context, ::tiro::MejorDisparoRequest* request, ::grpc::ServerAsyncResponseWriter< ::tiro::MejorDisparoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DimeCentroDiana<WithAsyncMethod_DisparaCannon<WithAsyncMethod_MejorDisparo<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DimeCentroDiana : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DimeCentroDiana() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tiro::CentroRequest, ::tiro::CentroResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiro::CentroRequest* request, ::tiro::CentroResponse* response) { return this->DimeCentroDiana(context, request, response); }));}
    void SetMessageAllocatorFor_DimeCentroDiana(
        ::grpc::MessageAllocator< ::tiro::CentroRequest, ::tiro::CentroResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiro::CentroRequest, ::tiro::CentroResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DimeCentroDiana() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DimeCentroDiana(::grpc::ServerContext* /*context*/, const ::tiro::CentroRequest* /*request*/, ::tiro::CentroResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DimeCentroDiana(
      ::grpc::CallbackServerContext* /*context*/, const ::tiro::CentroRequest* /*request*/, ::tiro::CentroResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DisparaCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DisparaCannon() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tiro::DisparoRequest, ::tiro::DisparoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiro::DisparoRequest* request, ::tiro::DisparoResponse* response) { return this->DisparaCannon(context, request, response); }));}
    void SetMessageAllocatorFor_DisparaCannon(
        ::grpc::MessageAllocator< ::tiro::DisparoRequest, ::tiro::DisparoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiro::DisparoRequest, ::tiro::DisparoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DisparaCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisparaCannon(::grpc::ServerContext* /*context*/, const ::tiro::DisparoRequest* /*request*/, ::tiro::DisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DisparaCannon(
      ::grpc::CallbackServerContext* /*context*/, const ::tiro::DisparoRequest* /*request*/, ::tiro::DisparoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MejorDisparo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MejorDisparo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tiro::MejorDisparoRequest, ::tiro::MejorDisparoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiro::MejorDisparoRequest* request, ::tiro::MejorDisparoResponse* response) { return this->MejorDisparo(context, request, response); }));}
    void SetMessageAllocatorFor_MejorDisparo(
        ::grpc::MessageAllocator< ::tiro::MejorDisparoRequest, ::tiro::MejorDisparoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiro::MejorDisparoRequest, ::tiro::MejorDisparoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MejorDisparo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MejorDisparo(::grpc::ServerContext* /*context*/, const ::tiro::MejorDisparoRequest* /*request*/, ::tiro::MejorDisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MejorDisparo(
      ::grpc::CallbackServerContext* /*context*/, const ::tiro::MejorDisparoRequest* /*request*/, ::tiro::MejorDisparoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DimeCentroDiana<WithCallbackMethod_DisparaCannon<WithCallbackMethod_MejorDisparo<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DimeCentroDiana : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DimeCentroDiana() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DimeCentroDiana() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DimeCentroDiana(::grpc::ServerContext* /*context*/, const ::tiro::CentroRequest* /*request*/, ::tiro::CentroResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DisparaCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DisparaCannon() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DisparaCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisparaCannon(::grpc::ServerContext* /*context*/, const ::tiro::DisparoRequest* /*request*/, ::tiro::DisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MejorDisparo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MejorDisparo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MejorDisparo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MejorDisparo(::grpc::ServerContext* /*context*/, const ::tiro::MejorDisparoRequest* /*request*/, ::tiro::MejorDisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DimeCentroDiana : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DimeCentroDiana() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DimeCentroDiana() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DimeCentroDiana(::grpc::ServerContext* /*context*/, const ::tiro::CentroRequest* /*request*/, ::tiro::CentroResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDimeCentroDiana(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DisparaCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DisparaCannon() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DisparaCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisparaCannon(::grpc::ServerContext* /*context*/, const ::tiro::DisparoRequest* /*request*/, ::tiro::DisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisparaCannon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MejorDisparo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MejorDisparo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_MejorDisparo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MejorDisparo(::grpc::ServerContext* /*context*/, const ::tiro::MejorDisparoRequest* /*request*/, ::tiro::MejorDisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMejorDisparo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DimeCentroDiana : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DimeCentroDiana() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DimeCentroDiana(context, request, response); }));
    }
    ~WithRawCallbackMethod_DimeCentroDiana() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DimeCentroDiana(::grpc::ServerContext* /*context*/, const ::tiro::CentroRequest* /*request*/, ::tiro::CentroResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DimeCentroDiana(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DisparaCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DisparaCannon() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DisparaCannon(context, request, response); }));
    }
    ~WithRawCallbackMethod_DisparaCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisparaCannon(::grpc::ServerContext* /*context*/, const ::tiro::DisparoRequest* /*request*/, ::tiro::DisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DisparaCannon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MejorDisparo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MejorDisparo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MejorDisparo(context, request, response); }));
    }
    ~WithRawCallbackMethod_MejorDisparo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MejorDisparo(::grpc::ServerContext* /*context*/, const ::tiro::MejorDisparoRequest* /*request*/, ::tiro::MejorDisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MejorDisparo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DimeCentroDiana : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DimeCentroDiana() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiro::CentroRequest, ::tiro::CentroResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiro::CentroRequest, ::tiro::CentroResponse>* streamer) {
                       return this->StreamedDimeCentroDiana(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DimeCentroDiana() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DimeCentroDiana(::grpc::ServerContext* /*context*/, const ::tiro::CentroRequest* /*request*/, ::tiro::CentroResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDimeCentroDiana(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiro::CentroRequest,::tiro::CentroResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DisparaCannon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DisparaCannon() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiro::DisparoRequest, ::tiro::DisparoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiro::DisparoRequest, ::tiro::DisparoResponse>* streamer) {
                       return this->StreamedDisparaCannon(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DisparaCannon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DisparaCannon(::grpc::ServerContext* /*context*/, const ::tiro::DisparoRequest* /*request*/, ::tiro::DisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisparaCannon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiro::DisparoRequest,::tiro::DisparoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MejorDisparo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MejorDisparo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiro::MejorDisparoRequest, ::tiro::MejorDisparoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiro::MejorDisparoRequest, ::tiro::MejorDisparoResponse>* streamer) {
                       return this->StreamedMejorDisparo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MejorDisparo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MejorDisparo(::grpc::ServerContext* /*context*/, const ::tiro::MejorDisparoRequest* /*request*/, ::tiro::MejorDisparoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMejorDisparo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiro::MejorDisparoRequest,::tiro::MejorDisparoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DimeCentroDiana<WithStreamedUnaryMethod_DisparaCannon<WithStreamedUnaryMethod_MejorDisparo<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DimeCentroDiana<WithStreamedUnaryMethod_DisparaCannon<WithStreamedUnaryMethod_MejorDisparo<Service > > > StreamedService;
};

}  // namespace tiro


#endif  // GRPC_tiro_2eproto__INCLUDED
